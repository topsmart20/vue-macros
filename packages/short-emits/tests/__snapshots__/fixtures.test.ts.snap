// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixtures > ./fixtures/basic.vue 1`] = `
"<script setup lang=\\"ts\\">
const emit = defineEmits<
  {
    // TSPropertySignature
    (evt: 'input', ...args: []): void
    (evt: 'update:modelValue', ...args: [val: string]): void
    (evt: 'update:color', ...args: [val: number]): void
    (evt: 'change', value: boolean): void

    // TSMethodSignature
    (evt: 'update'): void

    (evt: 'foo\\"\\\\'', value: boolean): void

    (evt: 0, value: boolean): void

    (evt: 'update:modelValue', ...args: [val: string]): void
  }
>()

emit('update:color', 1)
emit('update:modelValue', 'foo')
emit('change', false)
emit(0, false)
</script>
"
`;

exports[`fixtures > ./fixtures/without-se.vue 1`] = `
"<script setup lang=\\"ts\\">
import { defineEmits } from '../../macros' assert { type: 'macro' }

const emit = defineEmits<{
  // TSPropertySignature
  (evt: 'input', ...args: []): void
  (evt: 'update:modelValue', ...args: [val: string]): void
  (evt: 'update:color', ...args: [val: number]): void
  (evt: 'change', value: boolean): void

  // TSMethodSignature
  (evt: 'update'): void

  (evt: 'foo\\"\\\\'', value: boolean): void

  (evt: 0, value: boolean): void
}>()

emit('update:color', 1)
emit('update:modelValue', 'foo')
emit('change', false)
emit(0, false)

const emit2 = defineEmits<(e: 'change') => void>()
emit2('change')
</script>
"
`;
