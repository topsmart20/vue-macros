// Vitest Snapshot v1

exports[`fixtures > ./fixtures/reactivity-transform/assignment.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_emitHelper from '/plugin-define-model/emit-helper';
let { modelValue, title } = defineProps<{
    modelValue: string
title: string
  }>();
const _DM_emit = defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:title', value: string): void
  }>();


_DM_emitHelper(_DM_emit, 'update:modelValue', _DM_emitHelper(_DM_emit, 'update:title', '123'))
</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/assignment-update.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_emitHelper from '/plugin-define-model/emit-helper';
let { count } = defineProps<{
    count: number
  }>();
const _DM_emit = defineEmits<{
    (evt: 'update:count', value: number): void
  }>();


_DM_emitHelper(_DM_emit, 'update:count', count + 1, count)
_DM_emitHelper(_DM_emit, 'update:count', count - 1, count)
_DM_emitHelper(_DM_emit, 'update:count', count + 1)
_DM_emitHelper(_DM_emit, 'update:count', count - 1)
_DM_emitHelper(_DM_emit, 'update:count', 1)
_DM_emitHelper(_DM_emit, 'update:count', count + 1)
_DM_emitHelper(_DM_emit, 'update:count', count - 1)
_DM_emitHelper(_DM_emit, 'update:count', count * 1)
_DM_emitHelper(_DM_emit, 'update:count', count / 1)

_DM_emitHelper(_DM_emit, 'update:count', count + 1)

const additionAssignment = () => (_DM_emitHelper(_DM_emit, 'update:count', count + 1))
const increment = () => _DM_emitHelper(_DM_emit, 'update:count', count + 1, count)
const add = () => (_DM_emitHelper(_DM_emit, 'update:count', count + 1))
</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/basic.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_emitHelper from '/plugin-define-model/emit-helper';
var { modelValue } = defineProps<{
    modelValue: string
visible: boolean
  }>();
const _DM_emit = defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();


console.log(modelValue)
_DM_emitHelper(_DM_emit, 'update:modelValue', 'newValue')
</script>

<template>
  <h1>123</h1>
</template>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/error-rest.vue 1`] = `"rest element is not supported"`;

exports[`fixtures > ./fixtures/reactivity-transform/multi-decl.vue 1`] = `
"<script setup lang=\\"ts\\">
let { modelValue } = defineProps<{
    modelValue: string
visible: boolean
  }>();
const _DM_emit = defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();
let a = 'b'
</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/no-decl.vue 1`] = `
"<script setup lang=\\"ts\\">
defineProps<{
    modelValue: string
visible: boolean
  }>();
const _DM_emit = defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();

</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/with-define-emits.vue 1`] = `
"<script setup lang=\\"ts\\">
const { modelValue } = defineProps<{
    modelValue: string
  }>();


const emit = defineEmits<{(evt: 'update:modelValue', value: string): void

  (evt: 'change'): void
}>()

emit('change')
</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/with-define-emits-decl.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_emitHelper from '/plugin-define-model/emit-helper';
let { modelValue } = defineProps<{
    modelValue: string
  }>();


const emit = defineEmits<{(evt: 'update:modelValue', value: string): void

  (evt: 'change'): void
}>()

{
  _DM_emitHelper(emit, 'update:modelValue', 'hello')
  emit('change')

  {
    let modelValue = 'world'
    modelValue = 'foo'
  }
}
</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/with-define-emits-no-decl.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_emitHelper from '/plugin-define-model/emit-helper';
let { modelValue } = defineProps<{
    modelValue: string
  }>();


const _defineModel_emit = defineEmits<{(evt: 'update:modelValue', value: string): void

  (evt: 'change'): void
}>()

_DM_emitHelper(_defineModel_emit, 'update:modelValue', '1')
</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/with-define-props.vue 1`] = `
"<script setup lang=\\"ts\\">
const _DM_emit = defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();


defineProps<{modelValue: string
visible: boolean

  title?: string
}>()
</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/with-define-props-decl.vue 1`] = `
"<script setup lang=\\"ts\\">
const _DM_emit = defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();


const {modelValue,  title } = defineProps<{modelValue: string
visible: boolean

  title?: string
}>()
</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/with-define-props-empty.vue 1`] = `
"<script setup lang=\\"ts\\">
const _DM_emit = defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();


defineProps< {modelValue: string
visible: boolean
  } > ()
</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/with-define-props-ref.vue 1`] = `
"<script setup lang=\\"ts\\">
const _DM_emit = defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();
interface Props {modelValue: string
visible: boolean

  title?: string
}

defineProps<Props>()


</script>
"
`;

exports[`fixtures > ./fixtures/reactivity-transform/with-define-props-rest.vue 1`] = `
"<script setup lang=\\"ts\\">
const _DM_emit = defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();


const {modelValue,  title, ...props } = defineProps<{modelValue: string
visible: boolean

  title?: string
}>()

console.log(props)
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue2/basic.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
let { value, title } = _DM_useVModel(['value', 'value', 'input'], ['title', 'title', 'update:title'])

const { id } = defineProps<{value: string
title: string
 id: string }>()

const emit = defineEmits<{(evt: 'input', value: string): void
(evt: 'update:title', value: string): void

  (evt: 'change'): void
}>()

{
  value = 'hello'
  title = 'world'
  emit('change')

  {
    let modelValue = 'world'
    modelValue = 'foo'
  }
}
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue2/custom-model.vue 1`] = `
"<script lang=\\"ts\\">
export default {
  model: {
    prop: 'value',
    event: 'changeInput',
  },
}
</script>
<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
let { value, title } = _DM_useVModel(['value', 'value', 'changeInput'], ['title', 'title', 'update:title'])

const { id } = defineProps<{value: string
title: string
 id: string }>()

const emit = defineEmits<{(evt: 'changeInput', value: string): void
(evt: 'update:title', value: string): void

  (evt: 'change'): void
}>()

{
  value = 'hello'
  title = 'world'
  emit('change')

  {
    let modelValue = 'world'
    modelValue = 'foo'
  }
}
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue2/custom-model-defineComponent.vue 1`] = `
"<script lang=\\"ts\\">
import { defineComponent } from 'vue'
export default defineComponent({
  model: {
    prop: 'value',
    event: 'changeInput'
  },
})
</script>
<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
let { value, title } = _DM_useVModel(['value', 'value', 'changeInput'], ['title', 'title', 'update:title'])

const { id } = defineProps<{value: string
title: string
 id: string }>()

const emit = defineEmits<{(evt: 'changeInput', value: string): void
(evt: 'update:title', value: string): void

  (evt: 'change'): void
}>()

{
  value = 'hello'
  title = 'world'
  emit('change')

  {
    let modelValue = 'world'
    modelValue = 'foo'
  }
}
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue2/v-model.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineProps<{
    value: string
  }>();
defineEmits<{
    (evt: 'input', value: string): void
  }>();
const { modelValue } = _DM_useVModel(['modelValue', 'value', 'input'])

modelValue.value = 'hello'
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/assignment.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineProps<{
    modelValue: string
title: string
  }>();
defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:title', value: string): void
  }>();
const { modelValue, title } = _DM_useVModel(['modelValue', 'modelValue', 'update:modelValue'], ['title', 'title', 'update:title'])

modelValue.value = title.value = '123'
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/basic.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineProps<{
    modelValue: string
visible: boolean
  }>();
defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();
const { modelValue } = _DM_useVModel(['modelValue', 'modelValue', 'update:modelValue'], ['visible', 'visible', 'update:visible'])

console.log(modelValue.value)
modelValue.value = 'newValue'
</script>

<template>
  <h1>123</h1>
</template>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/define-props-runtime.vue 1`] = `undefined`;

exports[`fixtures > ./fixtures/runtime/vue3/empty.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineProps<{
    
  }>();
defineEmits<{
    
  }>();
_DM_useVModel()
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/error-empty-define-props.vue 1`] = `"defineProps() expected a type parameter when used with defineModel."`;

exports[`fixtures > ./fixtures/runtime/vue3/error-runtime.vue 1`] = `"defineProps() cannot accept non-type arguments when used with defineModel()"`;

exports[`fixtures > ./fixtures/runtime/vue3/multi-decl.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineProps<{
    modelValue: string
visible: boolean
  }>();
defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();
const a = 'b',
  { modelValue } = _DM_useVModel(['modelValue', 'modelValue', 'update:modelValue'], ['visible', 'visible', 'update:visible'])
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/no-decl.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineProps<{
    modelValue: string
visible: boolean
  }>();
defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();
_DM_useVModel(['modelValue', 'modelValue', 'update:modelValue'], ['visible', 'visible', 'update:visible'])
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/rest.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineProps<{
    modelValue: string
visible: boolean
  }>();
defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();
const { ...rest } = _DM_useVModel(['modelValue', 'modelValue', 'update:modelValue'], ['visible', 'visible', 'update:visible'])

rest.modelValue.value = 'foo'
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/with-defaults.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineEmits<{
    (evt: 'update:foo', value: string): void
  }>();
export interface Props {foo: string

  color: string
}

const { foo } = _DM_useVModel(['foo', 'foo', 'update:foo'])

withDefaults(defineProps<Props>(), {
  color: 'blue'
})

console.log(foo)
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/with-define-emits.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineProps<{
    modelValue: string
  }>();
const { modelValue } = _DM_useVModel(['modelValue', 'modelValue', 'update:modelValue'])

const emit = defineEmits<{(evt: 'update:modelValue', value: string): void

  (evt: 'change'): void
}>()

emit('change')
modelValue.value = 'hello'
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/with-define-props.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();
const { modelValue } = _DM_useVModel(['modelValue', 'modelValue', 'update:modelValue'], ['visible', 'visible', 'update:visible'])

defineProps<{modelValue: string
visible: boolean

  title?: string
}>()
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/with-define-props-empty.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();
const { modelValue } = _DM_useVModel(['modelValue', 'modelValue', 'update:modelValue'], ['visible', 'visible', 'update:visible'])

defineProps< {modelValue: string
visible: boolean
  } > ()
</script>
"
`;

exports[`fixtures > ./fixtures/runtime/vue3/with-define-props-ref.vue 1`] = `
"<script setup lang=\\"ts\\">
import _DM_useVModel from '/plugin-define-model/use-vmodel';
defineEmits<{
    (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
  }>();
interface Props {modelValue: string
visible: boolean

  title?: string
}

defineProps<Props>()

const { modelValue } = _DM_useVModel(['modelValue', 'modelValue', 'update:modelValue'], ['visible', 'visible', 'update:visible'])
</script>
"
`;
