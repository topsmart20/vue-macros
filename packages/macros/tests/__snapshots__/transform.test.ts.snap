// Vitest Snapshot v1

exports[`transform > tests/fixtures/basic.vue 1`] = `
"<script setup lang=\\"ts\\">import { emitHelper as __emitHelper } from 'unplugin-vue-macros/helper'
var { modelValue } = defineProps<{
  modelValue: string
visible: boolean
}>();
const _defineModel_emit = defineEmits<{
  (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
}>();



console.log(modelValue)
__emitHelper(_defineModel_emit, 'update:modelValue', 'newValue')
</script>

<template>
  <h1>123</h1>
</template>
"
`;

exports[`transform > tests/fixtures/decls.vue 1`] = `
"<script setup lang=\\"ts\\">let { modelValue } = defineProps<{
  modelValue: string
visible: boolean
}>();
const _defineModel_emit = defineEmits<{
  (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
}>();

let a = 'b'
</script>
"
`;

exports[`transform > tests/fixtures/error-rest.vue 1`] = `[SyntaxError: not supported]`;

exports[`transform > tests/fixtures/vue2.vue 1`] = `
"<script setup lang=\\"ts\\">import { emitHelper as __emitHelper } from 'unplugin-vue-macros/helper'



const {value, title,  id } = defineProps<{value: string
title: string
 id: string }>()

const emit = defineEmits<{(evt: 'input', value: string): void
(evt: 'update:title', value: string): void

  (evt: 'change'): void
}>()

{
  __emitHelper(emit, 'input', 'hello')
  __emitHelper(emit, 'update:title', 'world')
  emit('change')

  {
    let modelValue = 'world'
    modelValue = 'foo'
  }
}
</script>
"
`;

exports[`transform > tests/fixtures/with-define-emits.vue 1`] = `
"<script setup lang=\\"ts\\">const { modelValue } = defineProps<{
  modelValue: string
}>();



const emit = defineEmits<{(evt: 'update:modelValue', value: string): void

  (evt: 'change'): void
}>()

emit('change')
</script>
"
`;

exports[`transform > tests/fixtures/with-define-emits-assignment.vue 1`] = `
"<script setup lang=\\"ts\\">import { emitHelper as __emitHelper } from 'unplugin-vue-macros/helper'
let { modelValue, title } = defineProps<{
  modelValue: string
title: string
}>();
const _defineModel_emit = defineEmits<{
  (evt: 'update:modelValue', value: string): void
(evt: 'update:title', value: string): void
}>();



__emitHelper(_defineModel_emit, 'update:modelValue', __emitHelper(_defineModel_emit, 'update:title', '123'))
</script>
"
`;

exports[`transform > tests/fixtures/with-define-emits-decl.vue 1`] = `
"<script setup lang=\\"ts\\">import { emitHelper as __emitHelper } from 'unplugin-vue-macros/helper'
let { modelValue } = defineProps<{
  modelValue: string
}>();



const emit = defineEmits<{(evt: 'update:modelValue', value: string): void

  (evt: 'change'): void
}>()

{
  __emitHelper(emit, 'update:modelValue', 'hello')
  emit('change')

  {
    let modelValue = 'world'
    modelValue = 'foo'
  }
}
</script>
"
`;

exports[`transform > tests/fixtures/with-define-props.vue 1`] = `
"<script setup lang=\\"ts\\">const _defineModel_emit = defineEmits<{
  (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
}>();



defineProps<{modelValue: string
visible: boolean

  title?: string
}>()
</script>
"
`;

exports[`transform > tests/fixtures/with-define-props-decl.vue 1`] = `
"<script setup lang=\\"ts\\">const _defineModel_emit = defineEmits<{
  (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
}>();



const {modelValue,  title } = defineProps<{modelValue: string
visible: boolean

  title?: string
}>()
</script>
"
`;

exports[`transform > tests/fixtures/with-define-props-empty.vue 1`] = `
"<script setup lang=\\"ts\\">const _defineModel_emit = defineEmits<{
  (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
}>();



defineProps< {modelValue: string
visible: boolean
  } > ()
</script>
"
`;

exports[`transform > tests/fixtures/with-define-props-ref.vue 1`] = `
"<script setup lang=\\"ts\\">const _defineModel_emit = defineEmits<{
  (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
}>();

interface Props {modelValue: string
visible: boolean

  title?: string
}

defineProps<Props>()


</script>
"
`;

exports[`transform > tests/fixtures/with-define-props-rest.vue 1`] = `
"<script setup lang=\\"ts\\">const _defineModel_emit = defineEmits<{
  (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
}>();



const {modelValue,  title, ...props } = defineProps<{modelValue: string
visible: boolean

  title?: string
}>()

console.log(props)
</script>
"
`;

exports[`transform > tests/fixtures/without-decl.vue 1`] = `
"<script setup lang=\\"ts\\">defineProps<{
  modelValue: string
visible: boolean
}>();
const _defineModel_emit = defineEmits<{
  (evt: 'update:modelValue', value: string): void
(evt: 'update:visible', value: boolean): void
}>();


</script>
"
`;
