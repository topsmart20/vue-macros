// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`fixtures > ./fixtures/basic.vue 1`] = `
"<script setup lang=\\"ts\\">
const __MACROS_props = defineProps<{
  foo: string[]
  bar: number
}>()
import { toRefs as __MACROS_toRefs } from 'vue';
import { expectTypeOf } from 'expect-type'
import type { ComputedRef, DeepReadonly, Ref } from 'vue'

const { foo, bar } = __MACROS_toRefs(__MACROS_props)
expectTypeOf(foo).toEqualTypeOf<ComputedRef<readonly string[]>>()
expectTypeOf(bar).toEqualTypeOf<ComputedRef<number>>()
</script>

<template>
  <div></div>
</template>
"
`;

exports[`fixtures > ./fixtures/with-defaults.vue 1`] = `
"<script setup lang=\\"ts\\">
const __MACROS_props = withDefaults(defineProps<{
    foo: string
    bar: number[]
  }>(), {
    foo: 'foo',
    bar: () => [1, 2, 3],
  })
import { toRefs as __MACROS_toRefs } from 'vue';
import { expectTypeOf } from 'expect-type'
import { ComputedRef } from 'vue'

const { foo, bar } = __MACROS_toRefs(__MACROS_props)

expectTypeOf(foo).toEqualTypeOf<ComputedRef<string>>()
expectTypeOf(bar).toEqualTypeOf<ComputedRef<readonly number[]>>()
</script>
"
`;
