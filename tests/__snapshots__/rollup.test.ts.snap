// Vitest Snapshot v1

exports[`transform > fixtures > tests/fixtures/basic.vue 1`] = `
"var basic = \`<script lang=\\"js\\">
export default {
  name: 'Foo',
}</script>
<script setup>

</script>

<template>
  <div>
    <h1>Hello World</h1>
  </div>
</template>
\`;

export { basic as default };
"
`;

exports[`transform > fixtures > tests/fixtures/el-button.vue 1`] = `
"var elButton = \`<script lang=\\"ts\\">
export default {
  name: 'ElButton',
}</script>
<template>
  <button
    ref=\\"buttonRef\\"
    :class=\\"[
      ns.b(),
      ns.m(buttonType),
      ns.m(buttonSize),
      ns.is('disabled', buttonDisabled),
      ns.is('loading', loading),
      ns.is('plain', plain),
      ns.is('round', round),
      ns.is('circle', circle),
    ]\\"
    :disabled=\\"buttonDisabled || loading\\"
    :autofocus=\\"autofocus\\"
    :type=\\"nativeType\\"
    :style=\\"buttonStyle\\"
    @click=\\"handleClick\\"
  >
    <template v-if=\\"loading\\">
      <slot v-if=\\"$slots.loading\\" name=\\"loading\\"></slot>
      <el-icon v-else :class=\\"ns.is('loading')\\">
        <component :is=\\"loadingIcon\\" />
      </el-icon>
    </template>
    <el-icon v-else-if=\\"icon\\">
      <component :is=\\"icon\\" />
    </el-icon>
    <span
      v-if=\\"$slots.default\\"
      :class=\\"{ [ns.em('text', 'expand')]: shouldAddSpace }\\"
    >
      <slot></slot>
    </span>
  </button>
</template>

<script lang=\\"ts\\" setup>
import { computed, inject, Text, ref, useSlots } from 'vue'
import { useCssVar } from '@vueuse/core'
import { TinyColor } from '@ctrl/tinycolor'
import { ElIcon } from '@element-plus/components/icon'
import {
  useDisabled,
  useFormItem,
  useGlobalConfig,
  useNamespace,
  useSize,
} from '@element-plus/hooks'
import { buttonGroupContextKey } from '@element-plus/tokens'
import { buttonEmits, buttonProps } from './button'



const props = defineProps(buttonProps)
const emit = defineEmits(buttonEmits)
const slots = useSlots()

const buttonRef = ref()
const buttonGroupContext = inject(buttonGroupContextKey, undefined)
const globalConfig = useGlobalConfig('button')
const ns = useNamespace('button')
const autoInsertSpace = computed(
  () => props.autoInsertSpace ?? globalConfig.value?.autoInsertSpace ?? false
)

// add space between two characters in Chinese
const shouldAddSpace = computed(() => {
  const defaultSlot = slots.default?.()
  if (autoInsertSpace.value && defaultSlot?.length === 1) {
    const slot = defaultSlot[0]
    if (slot?.type === Text) {
      const text = slot.children
      return /^\\\\p{Unified_Ideograph}{2}$/u.test(text as string)
    }
  }
  return false
})

const { form } = useFormItem()
const buttonSize = useSize(computed(() => buttonGroupContext?.size))
const buttonDisabled = useDisabled()
const buttonType = computed(() => props.type || buttonGroupContext?.type || '')

// calculate hover & active color by color
const typeColor = computed(() => useCssVar(\\\\\`--el-color-\${props.type}\\\\\`).value)
const buttonStyle = computed(() => {
  let styles = {}

  const buttonColor = props.color || typeColor.value

  if (buttonColor) {
    const shadeBgColor = new TinyColor(buttonColor).shade(10).toString()
    if (props.plain) {
      styles = {
        '--el-button-bg-color': new TinyColor(buttonColor).tint(90).toString(),
        '--el-button-text-color': buttonColor,
        '--el-button-hover-text-color': 'var(--el-color-white)',
        '--el-button-hover-bg-color': buttonColor,
        '--el-button-hover-border-color': buttonColor,
        '--el-button-active-bg-color': shadeBgColor,
        '--el-button-active-text-color': 'var(--el-color-white)',
        '--el-button-active-border-color': shadeBgColor,
      }
    } else {
      const tintBgColor = new TinyColor(buttonColor).tint(20).toString()
      styles = {
        '--el-button-bg-color': buttonColor,
        '--el-button-border-color': buttonColor,
        '--el-button-hover-bg-color': tintBgColor,
        '--el-button-hover-border-color': tintBgColor,
        '--el-button-active-bg-color': shadeBgColor,
        '--el-button-active-border-color': shadeBgColor,
      }
    }

    if (buttonDisabled.value) {
      const disabledButtonColor = new TinyColor(buttonColor).tint(50).toString()
      styles['--el-button-disabled-bg-color'] = disabledButtonColor
      styles['--el-button-disabled-border-color'] = disabledButtonColor
    }
  }

  return styles
})

const handleClick = (evt: MouseEvent) => {
  if (props.nativeType === 'reset') {
    form?.resetFields()
  }
  emit('click', evt)
}
</script>
\`;

export { elButton as default };
"
`;

exports[`transform > fixtures > tests/fixtures/error1.vue 1`] = `[Error: unplugin-vue-define-options SyntaxError: \`defineOptions()\` in <script setup> cannot reference locally declared variables because it will be hoisted outside of the setup() function.]`;

exports[`transform > fixtures > tests/fixtures/error2.vue 1`] = `[Error: unplugin-vue-define-options SyntaxError: \`defineOptions()\` in <script setup> cannot reference locally declared variables because it will be hoisted outside of the setup() function.]`;

exports[`transform > fixtures > tests/fixtures/error3.vue 1`] = `[Error: unplugin-vue-define-options SyntaxError: defineOptions cannot be used, with both script and script-setup.]`;

exports[`transform > fixtures > tests/fixtures/function.vue 1`] = `
"var _function = \`<script lang=\\"ts\\">
export default {
  foo() {
    console.log('hello')
  },
  bar: () => console.log('world'),
  baz: class {
    a() {
      const a = () => 'b'
      return a
    }
  },
  fun: function () {
    console.log('fun')
  },
  iife: (() => Math.random())(),
}</script>
<script lang=\\"ts\\" setup>

</script>
\`;

export { _function as default };
"
`;

exports[`transform > fixtures > tests/fixtures/no-transform.vue 1`] = `
"var noTransform = \`<script setup>
console.log('setup')
</script>

<script>
export default {
  name: 'Hello',
}
</script>

<template>
  <div>
    <h1>Hello World</h1>
  </div>
</template>
\`;

export { noTransform as default };
"
`;

exports[`transform > fixtures > tests/fixtures/no-transform2.vue 1`] = `
"var noTransform2 = \`<script setup>
console.log('setup')
</script>

<template>
  <div>
    <h1>Hello World</h1>
  </div>
</template>
\`;

export { noTransform2 as default };
"
`;

exports[`transform > fixtures > tests/fixtures/props.vue 1`] = `
"var props = \`<script lang=\\"js\\">
export default {
  props: { foo: Number },
  emits: [],
}</script>
<script setup>

defineProps({
  foo: String,
})
</script>
\`;

export { props as default };
"
`;

exports[`transform > fixtures > tests/fixtures/typescript.vue 1`] = `
"var typescript = \`<script lang=\\"ts\\">
export default {
  name: 'Foo',
}</script>
<script lang=\\"ts\\" setup>


console.log('Hello')
</script>

<template>
  <div>
    <h1>Hello World</h1>
  </div>
</template>
\`;

export { typescript as default };
"
`;
